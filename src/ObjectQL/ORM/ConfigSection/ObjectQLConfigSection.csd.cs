//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ObjectQL
{
    
    
    /// <summary>
    /// The ObjectQLSection Configuration Section.
    /// </summary>
    public partial class ObjectQLSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ObjectQLSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ObjectQLSectionSectionName = "objectQL";
        
        /// <summary>
        /// The XML path of the ObjectQLSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ObjectQLSectionSectionPath = "objectQL";
        
        /// <summary>
        /// Gets the ObjectQLSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public static global::ObjectQL.ObjectQLSection Instance
        {
            get
            {
                return ((global::ObjectQL.ObjectQLSection)(global::System.Configuration.ConfigurationManager.GetSection(global::ObjectQL.ObjectQLSection.ObjectQLSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.ObjectQLSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::ObjectQL.ObjectQLSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region drivers Property
        /// <summary>
        /// The XML name of the <see cref="drivers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string driversPropertyName = "drivers";
        
        /// <summary>
        /// Gets or sets the drivers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The drivers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.ObjectQLSection.driversPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ObjectQL.DriverAccessCollection drivers
        {
            get
            {
                return ((global::ObjectQL.DriverAccessCollection)(base[global::ObjectQL.ObjectQLSection.driversPropertyName]));
            }
            set
            {
                base[global::ObjectQL.ObjectQLSection.driversPropertyName] = value;
            }
        }
        #endregion
        
        #region containers Property
        /// <summary>
        /// The XML name of the <see cref="containers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string containersPropertyName = "containers";
        
        /// <summary>
        /// Gets or sets the containers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The containers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.ObjectQLSection.containersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ObjectQL.ORM.ConfigSection.MapContainerCollection containers
        {
            get
            {
                return ((global::ObjectQL.ORM.ConfigSection.MapContainerCollection)(base[global::ObjectQL.ObjectQLSection.containersPropertyName]));
            }
            set
            {
                base[global::ObjectQL.ObjectQLSection.containersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ObjectQL
{
    
    
    /// <summary>
    /// A collection of DriverAccess instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ObjectQL.DriverAccess), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ObjectQL.DriverAccessCollection.DriverAccessPropertyName)]
    public partial class DriverAccessCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ObjectQL.DriverAccess"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string DriverAccessPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override string ElementName
        {
            get
            {
                return global::ObjectQL.DriverAccessCollection.DriverAccessPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ObjectQL.DriverAccessCollection.DriverAccessPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ObjectQL.DriverAccess)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ObjectQL.DriverAccess"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ObjectQL.DriverAccess"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ObjectQL.DriverAccess();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.DriverAccess"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.DriverAccess"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.DriverAccess this[int index]
        {
            get
            {
                return ((global::ObjectQL.DriverAccess)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.DriverAccess"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::ObjectQL.DriverAccess"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.DriverAccess this[object name]
        {
            get
            {
                return ((global::ObjectQL.DriverAccess)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ObjectQL.DriverAccess"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::ObjectQL.DriverAccess"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Add(global::ObjectQL.DriverAccess add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ObjectQL.DriverAccess"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::ObjectQL.DriverAccess"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Remove(global::ObjectQL.DriverAccess add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.DriverAccess"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.DriverAccess"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.DriverAccess GetItemAt(int index)
        {
            return ((global::ObjectQL.DriverAccess)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.DriverAccess"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::ObjectQL.DriverAccess"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.DriverAccess GetItemByKey(string name)
        {
            return ((global::ObjectQL.DriverAccess)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ObjectQL
{
    
    
    /// <summary>
    /// The DriverAccess Configuration Element.
    /// </summary>
    public partial class DriverAccess : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.DriverAccess.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::ObjectQL.DriverAccess.NamePropertyName]));
            }
            set
            {
                base[global::ObjectQL.DriverAccess.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.DriverAccess.ProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::ObjectQL.DriverAccess.ProviderPropertyName]));
            }
            set
            {
                base[global::ObjectQL.DriverAccess.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ObjectQL
{
    
    
    /// <summary>
    /// The MapRegisterSetting Configuration Element.
    /// </summary>
    public partial class MapRegisterSetting : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.MapRegisterSetting.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::ObjectQL.MapRegisterSetting.NamePropertyName]));
            }
            set
            {
                base[global::ObjectQL.MapRegisterSetting.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ObjectQL
{
    
    
    /// <summary>
    /// A collection of MapRegisterSetting instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ObjectQL.MapRegisterSetting), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ObjectQL.MapContainer.MapRegisterSettingPropertyName)]
    public partial class MapContainer : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ObjectQL.MapRegisterSetting"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string MapRegisterSettingPropertyName = "register";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override string ElementName
        {
            get
            {
                return global::ObjectQL.MapContainer.MapRegisterSettingPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ObjectQL.MapContainer.MapRegisterSettingPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ObjectQL.MapRegisterSetting)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ObjectQL.MapRegisterSetting"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ObjectQL.MapRegisterSetting"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ObjectQL.MapRegisterSetting();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapRegisterSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.MapRegisterSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapRegisterSetting this[int index]
        {
            get
            {
                return ((global::ObjectQL.MapRegisterSetting)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapRegisterSetting"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::ObjectQL.MapRegisterSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapRegisterSetting this[object name]
        {
            get
            {
                return ((global::ObjectQL.MapRegisterSetting)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ObjectQL.MapRegisterSetting"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="register">The <see cref="global::ObjectQL.MapRegisterSetting"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Add(global::ObjectQL.MapRegisterSetting register)
        {
            base.BaseAdd(register);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ObjectQL.MapRegisterSetting"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="register">The <see cref="global::ObjectQL.MapRegisterSetting"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Remove(global::ObjectQL.MapRegisterSetting register)
        {
            base.BaseRemove(this.GetElementKey(register));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapRegisterSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.MapRegisterSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapRegisterSetting GetItemAt(int index)
        {
            return ((global::ObjectQL.MapRegisterSetting)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapRegisterSetting"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::ObjectQL.MapRegisterSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapRegisterSetting GetItemByKey(string name)
        {
            return ((global::ObjectQL.MapRegisterSetting)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConnectionKey Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string ConnectionKeyPropertyName = "connectionKey";
        
        /// <summary>
        /// Gets or sets the ConnectionKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.MapContainer.ConnectionKeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ConnectionKey
        {
            get
            {
                return ((string)(base[global::ObjectQL.MapContainer.ConnectionKeyPropertyName]));
            }
            set
            {
                base[global::ObjectQL.MapContainer.ConnectionKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Schema Property
        /// <summary>
        /// The XML name of the <see cref="Schema"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SchemaPropertyName = "schema";
        
        /// <summary>
        /// Gets or sets the Schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Schema.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.MapContainer.SchemaPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Schema
        {
            get
            {
                return ((string)(base[global::ObjectQL.MapContainer.SchemaPropertyName]));
            }
            set
            {
                base[global::ObjectQL.MapContainer.SchemaPropertyName] = value;
            }
        }
        #endregion
        
        #region BuildingPolicy Property
        /// <summary>
        /// The XML name of the <see cref="BuildingPolicy"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string BuildingPolicyPropertyName = "buildingPolicy";
        
        /// <summary>
        /// Gets or sets the BuildingPolicy.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The BuildingPolicy.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ObjectQL.MapContainer.BuildingPolicyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string BuildingPolicy
        {
            get
            {
                return ((string)(base[global::ObjectQL.MapContainer.BuildingPolicyPropertyName]));
            }
            set
            {
                base[global::ObjectQL.MapContainer.BuildingPolicyPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ObjectQL.ORM.ConfigSection
{
    
    
    /// <summary>
    /// A collection of MapContainer instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ObjectQL.MapContainer), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ObjectQL.ORM.ConfigSection.MapContainerCollection.MapContainerPropertyName)]
    public partial class MapContainerCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ObjectQL.MapContainer"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string MapContainerPropertyName = "mapContainer";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override string ElementName
        {
            get
            {
                return global::ObjectQL.ORM.ConfigSection.MapContainerCollection.MapContainerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ObjectQL.ORM.ConfigSection.MapContainerCollection.MapContainerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ObjectQL.MapContainer)(element)).ConnectionKey;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ObjectQL.MapContainer"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ObjectQL.MapContainer"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ObjectQL.MapContainer();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapContainer"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.MapContainer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapContainer this[int index]
        {
            get
            {
                return ((global::ObjectQL.MapContainer)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapContainer"/> with the specified key.
        /// </summary>
        /// <param name="connectionKey">The key of the <see cref="global::ObjectQL.MapContainer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapContainer this[object connectionKey]
        {
            get
            {
                return ((global::ObjectQL.MapContainer)(base.BaseGet(connectionKey)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ObjectQL.MapContainer"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mapContainer">The <see cref="global::ObjectQL.MapContainer"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Add(global::ObjectQL.MapContainer mapContainer)
        {
            base.BaseAdd(mapContainer);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ObjectQL.MapContainer"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mapContainer">The <see cref="global::ObjectQL.MapContainer"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Remove(global::ObjectQL.MapContainer mapContainer)
        {
            base.BaseRemove(this.GetElementKey(mapContainer));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapContainer"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ObjectQL.MapContainer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapContainer GetItemAt(int index)
        {
            return ((global::ObjectQL.MapContainer)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ObjectQL.MapContainer"/> with the specified key.
        /// </summary>
        /// <param name="connectionKey">The key of the <see cref="global::ObjectQL.MapContainer"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::ObjectQL.MapContainer GetItemByKey(string connectionKey)
        {
            return ((global::ObjectQL.MapContainer)(base.BaseGet(((object)(connectionKey)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
